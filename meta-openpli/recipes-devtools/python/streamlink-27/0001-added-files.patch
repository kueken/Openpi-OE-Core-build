From 18e84d35743d0d8a5106628b23fe5e754558e14e Mon Sep 17 00:00:00 2001
From: kueken <ohnemailadresse@arcor.de>
Date: Sun, 20 Jun 2021 14:29:36 +0200
Subject: [PATCH] added_files

---
 src/streamlink/opts_parser.py         | 677 ++++++++++++++++++++++++++
 src/streamlink/plugins/muxedstream.py |  41 ++
 src/streamlink/plugins/radio2see.py   |  35 ++
 src/streamlink/plugins/youtubedl.py   | 419 ++++++++++++++++
 4 files changed, 1172 insertions(+)
 create mode 100644 src/streamlink/opts_parser.py
 create mode 100644 src/streamlink/plugins/muxedstream.py
 create mode 100644 src/streamlink/plugins/radio2see.py
 create mode 100644 src/streamlink/plugins/youtubedl.py

diff --git a/src/streamlink/opts_parser.py b/src/streamlink/opts_parser.py
new file mode 100644
index 00000000..7a39ae3e
--- /dev/null
+++ b/src/streamlink/opts_parser.py
@@ -0,0 +1,677 @@
+ï»¿"""
+  Options Parser for Streamlinksrv by Billy2011.
+  Options must be appended to the URL.
+  Not all options are supported.
+"""
+
+import argparse
+import os
+import re
+from collections import OrderedDict
+from contextlib import contextmanager
+from shlex import split as argsplit
+from string import printable
+from textwrap import dedent
+
+from streamlink import NoPluginError
+from streamlink import logger
+from streamlink.plugin import PluginOptions
+from streamlink.utils.args import comma_list, comma_list_filter, filesize, keyvalue, num
+from streamlink.utils.times import hours_minutes_seconds
+
+__version__ = "0.2.9"
+
+STREAM_PASSTHROUGH = ["hls", "http", "hls-multi", "dash"]
+XDG_CONFIG_HOME = "/home/root/.config"
+XDG_STATE_HOME = "/home/root/.local/state"
+CONFIG_FILES = [
+    os.path.expanduser(XDG_CONFIG_HOME + "/streamlink/config"),
+    os.path.expanduser(XDG_CONFIG_HOME + "/.streamlinkrc")
+]
+PLUGINS_DIR = os.path.expanduser(XDG_CONFIG_HOME + "/streamlink/plugins")
+LOG_DIR = os.path.expanduser(XDG_STATE_HOME + "/streamlink/logs")
+
+_printable_re = re.compile(r"[{0}]".format(printable))
+_option_re = re.compile(r"""
+    (?P<name>[\w-]+) # A option name, valid characters are A to z and dash.
+    \s*
+    (?P<op>=)? # Separating the option and the value with a equals sign is
+               # common, but optional.
+    \s*
+    (?P<value>.*) # The value, anything goes.
+""", re.VERBOSE)
+
+LOGGER = None
+PARSER = None
+DEFAULT_LEVEL = "info"
+
+
+@contextmanager
+def ignored(*exceptions):
+    try:
+        yield
+    except exceptions:
+        pass
+
+
+class ArgumentParser(argparse.ArgumentParser):
+    def convert_arg_line_to_args(self, line):
+        match = _printable_re.search(line)
+        if not match:
+            return
+        line = line[match.start():].strip()
+
+        # Skip lines that do not start with a valid option (e.g. comments)
+        option = _option_re.match(line)
+        if not option:
+            return
+
+        name, value = option.group("name", "value")
+        if name and value:
+            yield "--{0}={1}".format(name, value)
+        elif name:
+            yield "--{0}".format(name)
+
+    def error(self, message):
+        LOGGER.error(message)
+
+
+class HelpFormatter(argparse.RawDescriptionHelpFormatter):
+    def __init__(self, max_help_position=4, *args, **kwargs):
+        # A smaller indent for args help.
+        kwargs["max_help_position"] = max_help_position
+        argparse.RawDescriptionHelpFormatter.__init__(self, *args, **kwargs)
+
+    def _split_lines(self, text, width):
+        text = dedent(text).strip() + "\n\n"
+        return text.splitlines()
+
+
+def build_parser():
+    global PARSER
+    PARSER = ArgumentParser(
+        fromfile_prefix_chars="@",
+        formatter_class=HelpFormatter,
+        add_help=False,
+        usage="%(prog)s [OPTIONS] <URL> [STREAM]",
+        description=dedent("""
+        Streamlink is command-line utility that extracts streams from
+        various services and pipes them into a video player of choice.
+        """),
+        epilog=dedent("""
+        For more in-depth documentation see:
+        https://streamlink.github.io
+        Please report broken plugins or bugs to the issue tracker on Github:
+        https://github.com/streamlink/streamlink/issues
+        """)
+    )
+
+    general = PARSER.add_argument_group("General options")
+    general.add_argument(
+        "-h", "--help",
+        action="store_true",
+    )
+    general.add_argument(
+        "--locale",
+        type=str,
+        metavar="LOCALE",
+    )
+    general.add_argument(
+        "-l", "--loglevel",
+        metavar="LEVEL",
+        choices=logger.levels,
+        default=DEFAULT_LEVEL,
+    )
+    general.add_argument(
+        "--logfile",
+        metavar="FILE",
+    )
+    general.add_argument(
+        "--interface",
+        type=str,
+        metavar="INTERFACE",
+    )
+    general.add_argument(
+        "-4", "--ipv4",
+        action="store_true",
+    )
+    general.add_argument(
+        "-6", "--ipv6",
+        action="store_true",
+    )
+
+    player = PARSER.add_argument_group("Player options")
+    player.add_argument(
+        "--player-passthrough",
+        metavar="TYPES",
+        type=comma_list_filter(STREAM_PASSTHROUGH),
+        default=[],
+    )
+
+    http = PARSER.add_argument_group("HTTP options")
+    http.add_argument(
+        "--http-proxy",
+        metavar="HTTP_PROXY",
+    )
+    http.add_argument(
+        "--https-proxy",
+        metavar="HTTPS_PROXY",
+    )
+    http.add_argument(
+        "--http-cookie",
+        metavar="KEY=VALUE",
+        type=keyvalue,
+        action="append",
+    )
+    http.add_argument(
+        "--http-header",
+        metavar="KEY=VALUE",
+        type=keyvalue,
+        action="append",
+    )
+    http.add_argument(
+        "--http-query-param",
+        metavar="KEY=VALUE",
+        type=keyvalue,
+        action="append",
+    )
+    http.add_argument(
+        "--http-ignore-env",
+        action="store_true",
+    )
+    http.add_argument(
+        "--http-no-ssl-verify",
+        action="store_true",
+    )
+    http.add_argument(
+        "--http-disable-dh",
+        action="store_true",
+    )
+    http.add_argument(
+        "--http-ssl-cert",
+        metavar="FILENAME",
+    )
+    http.add_argument(
+        "--http-ssl-cert-crt-key",
+        metavar=("CRT_FILENAME", "KEY_FILENAME"),
+        nargs=2,
+    )
+    http.add_argument(
+        "--http-timeout",
+        metavar="TIMEOUT",
+        type=num(float, min=0),
+    )
+
+    transport = PARSER.add_argument_group("Stream transport options")
+    transport.add_argument(
+        "--hds-live-edge",
+        type=num(float, min=0),
+        metavar="SECONDS",
+    )
+    transport.add_argument(
+        "--hds-segment-attempts",
+        type=num(int, min=0),
+        metavar="ATTEMPTS",
+    )
+    transport.add_argument(
+        "--hds-segment-threads",
+        type=num(int, max=10),
+        metavar="THREADS",
+    )
+    transport.add_argument(
+        "--hds-segment-timeout",
+        type=num(float, min=0),
+        metavar="TIMEOUT",
+    )
+    transport.add_argument(
+        "--hds-timeout",
+        type=num(float, min=0),
+        metavar="TIMEOUT",
+    )
+    transport.add_argument(
+        "--hls-live-edge",
+        type=num(int, min=0),
+        metavar="SEGMENTS",
+    )
+    transport.add_argument(
+        "--hls-segment-stream-data",
+        action="store_true",
+    )
+    transport.add_argument(
+        "--hls-segment-attempts",
+        type=num(int, min=0),
+        metavar="ATTEMPTS",
+    )
+    transport.add_argument(
+        "--hls-playlist-reload-attempts",
+        type=num(int, min=0),
+        metavar="ATTEMPTS",
+    )
+    transport.add_argument(
+        "--hls-playlist-reload-time",
+        metavar="TIME",
+    )
+    transport.add_argument(
+        "--hls-segment-threads",
+        type=num(int, max=10),
+        metavar="THREADS",
+    )
+    transport.add_argument(
+        "--hls-segment-timeout",
+        type=num(float, min=0),
+        metavar="TIMEOUT",
+    )
+    transport.add_argument(
+        "--hls-segment-ignore-names",
+        metavar="NAMES",
+        type=comma_list,
+    )
+    transport.add_argument(
+        "--hls-segment-key-uri",
+        metavar="URI",
+        type=str,
+    )
+    transport.add_argument(
+        "--hls-audio-select",
+        type=comma_list,
+        metavar="CODE",
+    )
+    transport.add_argument(
+        "--hls-timeout",
+        type=num(float, min=0),
+        metavar="TIMEOUT",
+    )
+    transport.add_argument(
+        "--hls-start-offset",
+        type=hours_minutes_seconds,
+        metavar="HH:MM:SS",
+        default=None,
+    )
+    transport.add_argument(
+        "--hls-duration",
+        type=hours_minutes_seconds,
+        metavar="HH:MM:SS",
+        default=None,
+    )
+    transport.add_argument(
+        "--hls-live-restart",
+        action="store_true",
+    )
+    transport.add_argument(
+        "--http-stream-timeout",
+        type=num(float, min=0),
+        metavar="TIMEOUT",
+    )
+    transport.add_argument(
+        "--http-add-audio",
+        metavar="URL",
+    )
+    transport.add_argument(
+        "--ringbuffer-size",
+        metavar="SIZE",
+        type=filesize,
+    )
+    transport.add_argument(
+        "--rtmp-proxy",
+        metavar="PROXY",
+    )
+    transport.add_argument(
+        "--rtmp-rtmpdump",
+        metavar="FILENAME",
+    )
+    transport.add_argument("--rtmpdump", help=argparse.SUPPRESS)
+    transport.add_argument(
+        "--rtmp-timeout",
+        type=num(float, min=0),
+        metavar="TIMEOUT",
+    )
+    transport.add_argument(
+        "--stream-segment-attempts",
+        type=num(int, min=0),
+        metavar="ATTEMPTS",
+    )
+    transport.add_argument(
+        "--stream-segment-threads",
+        type=num(int, max=10),
+        metavar="THREADS",
+    )
+    transport.add_argument(
+        "--stream-segment-timeout",
+        type=num(float, min=0),
+        metavar="TIMEOUT",
+    )
+    transport.add_argument(
+        "--stream-timeout",
+        type=num(float, min=0),
+        metavar="TIMEOUT",
+    )
+    transport.add_argument(
+        "--subprocess-errorlog",
+        action="store_true",
+    )
+    transport.add_argument(
+        "--subprocess-errorlog-path",
+        type=str,
+        metavar="PATH",
+    )
+    transport.add_argument(
+        "--ffmpeg-ffmpeg",
+        metavar="FILENAME",
+    )
+    transport.add_argument(
+        "--ffmpeg-verbose",
+        action="store_true",
+    )
+    transport.add_argument(
+        "--ffmpeg-verbose-path",
+        type=str,
+        metavar="PATH",
+    )
+    transport.add_argument(
+        "--ffmpeg-fout",
+        type=str,
+        metavar="OUTFORMAT",
+    )
+    transport.add_argument(
+        "--ffmpeg-video-transcode",
+        metavar="CODEC",
+    )
+    transport.add_argument(
+        "--ffmpeg-audio-transcode",
+        metavar="CODEC",
+    )
+    transport.add_argument(
+        "--ffmpeg-copyts",
+        action="store_true",
+    )
+    transport.add_argument(
+        "--ffmpeg-start-at-zero",
+        action="store_true",
+    )
+    transport.add_argument(
+        "--mux-subtitles",
+        action="store_true",
+    )
+
+    stream = PARSER.add_argument_group("Stream options")
+    stream.add_argument(
+        "--default-stream",
+        type=comma_list,
+        metavar="STREAM",
+    )
+    stream.add_argument(
+        "--stream-types", "--stream-priority",
+        metavar="TYPES",
+        type=comma_list,
+    )
+    stream.add_argument(
+        "--stream-sorting-excludes",
+        metavar="STREAMS",
+        type=comma_list,
+    )
+    stream.add_argument(
+        "--retry-open",
+        metavar="ATTEMPTS",
+        type=num(int, min=0),
+        default=1,
+    )
+
+    return PARSER
+
+
+def setupTransportOpts(streamlink, args):
+    """Sets Streamlink options."""
+    if args.interface:
+        streamlink.set_option("interface", args.interface)
+
+    if args.ipv4:
+        streamlink.set_option("ipv4", args.ipv4)
+
+    if args.ipv6:
+        streamlink.set_option("ipv6", args.ipv6)
+
+    if args.hls_live_edge:
+        streamlink.set_option("hls-live-edge", args.hls_live_edge)
+
+    if args.hls_segment_attempts:
+        streamlink.set_option("hls-segment-attempts", args.hls_segment_attempts)
+
+    if args.hls_segment_stream_data:
+        streamlink.set_option("hls-segment-stream-data", args.hls_segment_stream_data)
+
+    if args.hls_playlist_reload_attempts:
+        streamlink.set_option("hls-playlist-reload-attempts", args.hls_playlist_reload_attempts)
+
+    if args.hls_playlist_reload_time:
+        streamlink.set_option("hls-playlist-reload-time", args.hls_playlist_reload_time)
+
+    if args.hls_segment_threads:
+        streamlink.set_option("hls-segment-threads", args.hls_segment_threads)
+
+    if args.hls_segment_timeout:
+        streamlink.set_option("hls-segment-timeout", args.hls_segment_timeout)
+
+    if args.hls_segment_ignore_names:
+        streamlink.set_option("hls-segment-ignore-names", args.hls_segment_ignore_names)
+
+    if args.hls_segment_key_uri:
+        streamlink.set_option("hls-segment-key-uri", args.hls_segment_key_uri)
+
+    if args.hls_timeout:
+        streamlink.set_option("hls-timeout", args.hls_timeout)
+
+    if args.hls_audio_select:
+        streamlink.set_option("hls-audio-select", args.hls_audio_select)
+
+    if args.hls_start_offset:
+        streamlink.set_option("hls-start-offset", args.hls_start_offset)
+
+    if args.hls_duration:
+        streamlink.set_option("hls-duration", args.hls_duration)
+
+    if args.hls_live_restart:
+        streamlink.set_option("hls-live-restart", args.hls_live_restart)
+
+    if args.hds_live_edge:
+        streamlink.set_option("hds-live-edge", args.hds_live_edge)
+
+    if args.hds_segment_attempts:
+        streamlink.set_option("hds-segment-attempts", args.hds_segment_attempts)
+
+    if args.hds_segment_threads:
+        streamlink.set_option("hds-segment-threads", args.hds_segment_threads)
+
+    if args.hds_segment_timeout:
+        streamlink.set_option("hds-segment-timeout", args.hds_segment_timeout)
+
+    if args.hds_timeout:
+        streamlink.set_option("hds-timeout", args.hds_timeout)
+
+    if args.http_add_audio:
+        streamlink.set_option("http-add-audio", args.http_add_audio)
+
+    if args.http_stream_timeout:
+        streamlink.set_option("http-stream-timeout", args.http_stream_timeout)
+
+    if args.ringbuffer_size:
+        streamlink.set_option("ringbuffer-size", args.ringbuffer_size)
+
+    if args.rtmp_proxy:
+        streamlink.set_option("rtmp-proxy", args.rtmp_proxy)
+
+    if args.rtmp_rtmpdump:
+        streamlink.set_option("rtmp-rtmpdump", args.rtmp_rtmpdump)
+    elif args.rtmpdump:
+        streamlink.set_option("rtmp-rtmpdump", args.rtmpdump)
+
+    if args.rtmp_timeout:
+        streamlink.set_option("rtmp-timeout", args.rtmp_timeout)
+
+    if args.stream_segment_attempts:
+        streamlink.set_option("stream-segment-attempts", args.stream_segment_attempts)
+
+    if args.stream_segment_threads:
+        streamlink.set_option("stream-segment-threads", args.stream_segment_threads)
+
+    if args.stream_segment_timeout:
+        streamlink.set_option("stream-segment-timeout", args.stream_segment_timeout)
+
+    if args.stream_timeout:
+        streamlink.set_option("stream-timeout", args.stream_timeout)
+
+    if args.ffmpeg_ffmpeg:
+        streamlink.set_option("ffmpeg-ffmpeg", args.ffmpeg_ffmpeg)
+    if args.ffmpeg_verbose:
+        streamlink.set_option("ffmpeg-verbose", args.ffmpeg_verbose)
+    if args.ffmpeg_verbose_path:
+        streamlink.set_option("ffmpeg-verbose-path", args.ffmpeg_verbose_path)
+    if args.ffmpeg_fout:
+        streamlink.set_option("ffmpeg-fout", args.ffmpeg_fout)
+    if args.ffmpeg_video_transcode:
+        streamlink.set_option("ffmpeg-video-transcode", args.ffmpeg_video_transcode)
+    if args.ffmpeg_audio_transcode:
+        streamlink.set_option("ffmpeg-audio-transcode", args.ffmpeg_audio_transcode)
+    if args.ffmpeg_copyts:
+        streamlink.set_option("ffmpeg-copyts", True)
+    if args.ffmpeg_start_at_zero:
+        streamlink.set_option("ffmpeg-start-at-zero", False)
+
+    if args.mux_subtitles:
+        streamlink.set_option("mux-subtitles", args.mux_subtitles)
+
+    streamlink.set_option("subprocess-errorlog", args.subprocess_errorlog)
+    streamlink.set_option("subprocess-errorlog-path", args.subprocess_errorlog_path)
+    streamlink.set_option("locale", args.locale)
+
+
+def setupHttpSession(streamlink, args):
+    """Sets the global HTTP settings, such as proxy and headers."""
+    if args.http_proxy:
+        streamlink.set_option("http-proxy", args.http_proxy)
+
+    if args.https_proxy:
+        streamlink.set_option("https-proxy", args.https_proxy)
+
+    if args.http_cookie:
+        streamlink.set_option("http-cookies", dict(args.http_cookie))
+
+    if args.http_header:
+        streamlink.set_option("http-headers", dict(args.http_header))
+
+    if args.http_query_param:
+        streamlink.set_option("http-query-params", dict(args.http_query_param))
+
+    if args.http_ignore_env:
+        streamlink.set_option("http-trust-env", False)
+
+    if args.http_no_ssl_verify:
+        streamlink.set_option("http-ssl-verify", False)
+
+    if args.http_disable_dh:
+        streamlink.set_option("http-disable-dh", True)
+
+    if args.http_ssl_cert:
+        streamlink.set_option("http-ssl-cert", args.http_ssl_cert)
+
+    if args.http_ssl_cert_crt_key:
+        streamlink.set_option("http-ssl-cert", tuple(args.http_ssl_cert_crt_key))
+
+    if args.http_timeout:
+        streamlink.set_option("http-timeout", args.http_timeout)
+
+
+def setup_plugin_args(streamlink):
+    """Sets Streamlink plugin options."""
+
+    plugin_args = PARSER.add_argument_group("Plugin options")
+    for pname, plugin in streamlink.plugins.items():
+        defaults = {}
+        for parg in plugin.arguments:
+            if not parg.is_global:
+                plugin_args.add_argument(parg.argument_name(pname), **parg.options)
+                defaults[parg.dest] = parg.default
+            else:
+                pargdest = parg.dest
+                for action in PARSER._actions:
+                    # find matching global argument
+                    if pargdest != action.dest:
+                        continue
+                    defaults[pargdest] = action.default
+
+                    # add plugin to global argument
+                    plugins = getattr(action, "plugins", [])
+                    plugins.append(pname)
+                    setattr(action, "plugins", plugins)
+
+        plugin.options = PluginOptions(defaults)
+
+    return True
+
+
+def setup_plugin_options(streamlink, plugin, args):
+    pname = plugin.module
+    required = OrderedDict({})
+    for parg in plugin.arguments:
+        if parg.options.get("help") == argparse.SUPPRESS:
+            continue
+
+        value = getattr(args, parg.dest if parg.is_global else parg.namespace_dest(pname))
+        streamlink.set_plugin_option(pname, parg.dest, value)
+
+        if not parg.is_global:
+            if parg.required:
+                required[parg.name] = parg
+            # if the value is set, check to see if any of the required arguments are not set
+            if parg.required or value:
+                try:
+                    for rparg in plugin.arguments.requires(parg.name):
+                        required[rparg.name] = rparg
+                except RuntimeError:
+                    LOGGER.error("{0} plugin has a configuration error and the arguments cannot be parsed".format(pname))
+                    break
+
+    if required:
+        for req in required.values():
+            if not streamlink.get_plugin_option(pname, req.dest):
+                streamlink.set_plugin_option(pname, req.dest, "")
+
+
+def setup_config_files(streamlink, url):
+    config_files = []
+    plugin = None
+
+    if url:
+        with ignored(NoPluginError):
+            plugin = streamlink.resolve_url(url)
+            config_files += ["{0}.{1}".format(fn, plugin.module) for fn in CONFIG_FILES]
+
+    for config_file in filter(os.path.isfile, CONFIG_FILES):
+        config_files.append(config_file)
+        break
+
+    return (config_files, plugin)
+
+
+def setup_args(arglist, config_files=[], ignore_unknown=False):
+    for config_file in filter(os.path.isfile, config_files):
+        arglist.insert(0, "@" + config_file)
+
+    args, unknown = PARSER.parse_known_args(arglist)
+
+    if unknown and not ignore_unknown:
+        PARSER.error("unrecognized arguments: {0}".format(' '.join(unknown)))
+
+    return args
+
+
+def conv_argitems_to_arglist(argitems):
+    arglist = []
+    for item in argitems:
+        for option in PARSER.convert_arg_line_to_args(item):
+            arglist.append(option)
+
+    return arglist
+
+
+__all__ = ["build_parser", "setup_args", "setupHttpSession", "setupTransportOpts", "conv_argitems_to_arglist",
+           "setup_plugin_args", "setup_plugin_options", "setup_config_files", "argsplit", "PLUGINS_DIR", "LOG_DIR"]
diff --git a/src/streamlink/plugins/muxedstream.py b/src/streamlink/plugins/muxedstream.py
new file mode 100644
index 00000000..d6c1092f
--- /dev/null
+++ b/src/streamlink/plugins/muxedstream.py
@@ -0,0 +1,41 @@
+from __future__ import unicode_literals
+
+import re
+
+from streamlink.plugin import Plugin
+from streamlink.plugin.plugin import parse_url_params
+from streamlink.stream import HTTPStream
+from streamlink.stream.ffmpegmux import MuxedStream
+from streamlink.utils import update_scheme
+
+
+class MuxedStreamPlugin(Plugin):
+    _url_re = re.compile(r"muxedstream://(.+)")
+
+    @classmethod
+    def can_handle_url(cls, url):
+        return cls._url_re.match(url) is not None
+
+    def _get_streams(self):
+        url, params = parse_url_params(self.url)
+        urlnoproto = self._url_re.match(url).group(1)
+        urlnoproto = update_scheme("http://", urlnoproto)
+
+        self.logger.debug("Video URL: {}", urlnoproto)
+
+        aurlnoproto = params.get("audio")
+        aurlnoproto = update_scheme("http://", aurlnoproto)
+        quality = params.get("quality", "unknown")
+
+        self.logger.debug("Video Quality: {}", quality)
+        self.logger.debug("Audio URL: {}", aurlnoproto)
+
+        streams = {}
+        streams[quality] = MuxedStream(
+            self.session, HTTPStream(self.session, urlnoproto), HTTPStream(self.session, aurlnoproto)
+        )
+
+        return streams
+
+
+__plugin__ = MuxedStreamPlugin
diff --git a/src/streamlink/plugins/radio2see.py b/src/streamlink/plugins/radio2see.py
new file mode 100644
index 00000000..0f9389ba
--- /dev/null
+++ b/src/streamlink/plugins/radio2see.py
@@ -0,0 +1,35 @@
+from __future__ import unicode_literals
+
+import re
+
+from streamlink.plugin.api import useragents
+from streamlink.plugins.livestream import Livestream
+
+
+class Radio2See(Livestream):
+    """
+    Support for www.radio21.de/tv & www.rockland.de/tv Live TV stream
+    """
+
+    _url_re = re.compile(r"https?://(?:www)\.(?:(radio21|rockland))\.de/(?:musik/)?(?:tv)")
+    _streamsrc_re = re.compile(r"""<iframe.+?src=["'](?P<streamsrc>[^"']+)["']""", re.DOTALL)
+
+    @classmethod
+    def can_handle_url(cls, url):
+        return cls._url_re.match(url) is not None
+
+    def _get_streams(self):
+        headers = {
+            "User-Agent": useragents.CHROME,
+        }
+
+        res = self.session.http.get(self.url, headers=headers)
+        src_m = self._streamsrc_re.search(res.text)
+        if src_m:
+            self.url = src_m.group("streamsrc")
+            return Livestream._get_streams(self)
+        else:
+            self.logger.error("Could not find the Livestream source for Radio2See")
+
+
+__plugin__ = Radio2See
diff --git a/src/streamlink/plugins/youtubedl.py b/src/streamlink/plugins/youtubedl.py
new file mode 100644
index 00000000..5419498f
--- /dev/null
+++ b/src/streamlink/plugins/youtubedl.py
@@ -0,0 +1,419 @@
+"""
+  YoutubeDL Plugin for Streamlink by Billy2011.
+  This plugin is only for youtube streams.
+  The URL's must have a "youtubedl://" prefix
+  Version 0.20 / 2021-06-19
+"""
+
+from __future__ import unicode_literals
+
+import logging
+import os
+import re
+from platform import node as hostname
+
+from streamlink.compat import html_unescape, urlparse
+from streamlink.exceptions import NoStreamsError
+from streamlink.plugin import Plugin, PluginArgument, PluginArguments, PluginError
+from streamlink.plugin.api import validate
+from streamlink.plugin.api.utils import itertags
+from streamlink.stream import HLSStream, HTTPStream
+from streamlink.stream.ffmpegmux import MuxedStream
+from streamlink.utils import parse_json, update_scheme
+
+log = logging.getLogger(__name__)
+
+try:
+    from youtube_dl import YoutubeDL
+    youtubedl = True
+except ImportError:
+    youtubedl = False
+    log.trace("YoutubeDL is not available")
+
+
+class YouTubeDL(Plugin):
+    _url_re = re.compile(
+        r"""(?x)youtubedl://(?:https?://)?(?:\w+\.)?youtu(?:\.be|be\.com)
+        (?:
+            (?:
+                /(?:
+                    watch.+v=
+                    |
+                    embed/(?!live_stream)
+                    |
+                    (?:v/)?
+                )(?P<video_id>[\w-]{11})(?P<pl_id>(?:&list=)[\w-]+)?
+            )
+            |
+            (?:
+                /(?:
+                    (?:user|c(?:hannel)?)/
+                    |
+                    embed/live_stream\?channel=
+                )[^/?&]+
+            )
+            |
+            (?:
+                /(?:c/)?[^/?]+/live/?$
+            )
+        )
+    """
+    )
+    _re_ytInitialPlayerResponse = re.compile(r"""var\s+ytInitialPlayerResponse\s*=\s*({.*?});\s*var\s+meta\s*=""", re.DOTALL)
+
+    _url_canonical = "https://www.youtube.com/watch?v={video_id}"
+
+    adp_video_h264 = {
+        135: "480p",  # h264
+        136: "720p",  # h264
+        137: "1080p",  # h264
+    }
+    adp_video_vp9 = {
+        247: "720p",  # vp9
+        302: "720p60",  # vp9 HFR
+        248: "1080p",  # vp9
+        271: "1440p",  # vp9
+        308: "1440p60",  # vp9 HFR
+        313: "2160p",  # vp9
+        315: "2160p60",  # vp9 HFR
+    }
+    adp_video_vp9_hdr = {
+        334: "720p60hdr",  # vp9 HFR HDR
+        335: "1080p60hdr",  # vp9 HFR HDR
+        336: "1440p60hdr",  # vp9 HFR HDR
+        337: "2160p60hdr",  # vp9 HFR HDR
+    }
+    video = {  # h264
+        93: "360p",  # HLS
+        94: "480p",  # HLS
+        95: "720p",  # HLS
+        96: "1080p",  # HLS
+        300: "720p60",  # HLS HFR
+        301: "1080p60",  # HLS HFR
+        22: "720p",
+        35: "480p",
+        18: "360p",
+        34: "360p",
+    }
+    adp_audio = {
+        140: 128,
+        141: 256,
+        171: 128,
+        172: 256,
+        249: 48,
+        250: 64,
+        251: 160,
+        256: 256,
+        258: 258,
+    }
+    ytdl_options = {
+        "nocheckcertificate": True,
+        "restrictfilenames": True,
+        "no_warnings": True,
+        "quiet": True,
+        "print_json": True,
+        "extract_flat": True,
+        "list_thumbnails": False,
+        "youtube_include_dash_manifest": False,
+    }
+    stb_vp9_1 = frozenset(["vuuno4k", "vuuno4kse", "vuultimo4k"])  # vp9 profile 1 supp.
+    stb_vp9_2 = frozenset(["vuzero4k", "vuduo4k"])  # vp9 profile 2 supp.
+
+    arguments = PluginArguments(
+        PluginArgument(
+            "playlist-dir",
+            type=str,
+            metavar="PATH",
+        ),
+        PluginArgument(
+            "yes-vp9-codecs",
+            action="store_true",
+        ),
+        PluginArgument(
+            "no-vp9-codecs",
+            action="store_true",
+        ),
+        PluginArgument(
+            "yes-vp9-hdr-codecs",
+            action="store_true",
+        ),
+        PluginArgument(
+            "no-adaptive-streams",
+            action="store_true",
+        ),
+        PluginArgument(
+            "no-opus-codec",
+            action="store_true",
+        ),
+    )
+
+    def __init__(self, url):
+        super(YouTubeDL, self).__init__(url)
+
+        self.author = None
+        self.title = None
+        self.video_id = None
+        consent = self.cache.get("consent_ck")
+        if consent is not None:
+            self.set_consent_ck(consent)
+
+    @classmethod
+    def can_handle_url(cls, url):
+        return cls._url_re.match(url) and youtubedl
+
+    @classmethod
+    def stream_weight(cls, stream):
+        match_3d = re.match(r"(\w+)_3d", stream)
+        match_hfr = re.match(r"(\d+p)(\d+)", stream)
+        if match_3d:
+            weight, group = Plugin.stream_weight(match_3d.group(1))
+            weight -= 1
+            group = "youtube_3d"
+        elif match_hfr:
+            weight, group = Plugin.stream_weight(match_hfr.group(1))
+            weight += 1
+            group = "high_frame_rate"
+        else:
+            weight, group = Plugin.stream_weight(stream)
+
+        return weight, group
+
+    @classmethod
+    def _get_canonical_url(cls, html):
+        for link in itertags(html, "link"):
+            if link.attributes.get("rel") == "canonical":
+                return link.attributes.get("href")
+
+    @classmethod
+    def _schema_playabilitystatus(cls, data):
+        schema = validate.Schema(
+            {"playabilityStatus": {
+                "status": validate.text,
+                validate.optional("reason"): validate.text
+            }},
+            validate.get("playabilityStatus"),
+            validate.union_get("status", "reason")
+        )
+        return validate.validate(schema, data)
+
+    @classmethod
+    def _schema_videodetails(cls, data):
+        schema = validate.Schema(
+            {"videoDetails": {
+                "videoId": validate.text,
+                "author": validate.text,
+                "title": validate.text,
+                validate.optional("isLiveContent"): validate.transform(bool)
+            }},
+            validate.get("videoDetails"),
+            validate.union_get("videoId", "author", "title", "isLiveContent")
+        )
+        return validate.validate(schema, data)
+
+    def _create_adaptive_streams(self, info, streams):
+        if not MuxedStream.is_usable(self.session):
+            log.info("Cannot use FFMPEG")
+            return streams
+
+        adaptive_streams = {}
+        best_audio_itag = None
+        adp_video = self.adp_video_h264.copy()
+        vp9 = "vp9" if hostname() in self.stb_vp9_1 or hostname() in self.stb_vp9_2 else ""
+        if not vp9:
+            log.debug("STB w/o vp9 4K support detected")
+            if self.get_option("yes-vp9-codecs"):
+                vp9 = "vp9"
+        elif self.get_option("no-vp9-codecs"):
+            vp9 = ""
+            log.info("VP9 Codecs are skipped")
+        if vp9:
+            adp_video.update(self.adp_video_vp9)
+            if self.get_option("yes-vp9-hdr-codecs") or hostname() in self.stb_vp9_2:
+                adp_video.update(self.adp_video_vp9_hdr)
+
+        # Extract streams from the DASH format list
+        for stream_info in info.get("formats", []):
+            itag = int(stream_info["format_id"])
+            if itag not in self.adp_audio and itag not in adp_video:
+                log.debug(
+                    "Skipped format:{}, Codec:{}",
+                    stream_info["format"],
+                    stream_info["acodec"] if stream_info["acodec"] != "none" else stream_info["vcodec"],
+                )
+                continue
+
+            # extract any high quality streams only available in adaptive formats and not skipped
+            adaptive_streams[itag] = stream_info["url"]
+            stream_format = stream_info["ext"]
+            if itag in self.adp_audio:
+                if self.get_option("no-opus-codec") and stream_info["acodec"] == "opus":
+                    log.debug("Skipped format:{}, Codec:{}", stream_info["format"], stream_info["acodec"])
+                    continue
+
+                stream = HTTPStream(self.session, stream_info["url"])
+                name = "audio_{0}".format(stream_format)
+                streams[name] = stream
+
+                # find the best quality audio stream m4a, opus or vorbis
+                if best_audio_itag is None or self.adp_audio[itag] > self.adp_audio[best_audio_itag]:
+                    best_audio_itag = itag
+
+        if best_audio_itag and adaptive_streams and MuxedStream.is_usable(self.session):
+            aurl = adaptive_streams[best_audio_itag]
+            for itag, name in adp_video.items():
+                if itag in adaptive_streams:
+                    vurl = adaptive_streams[itag]
+                    log.debug(
+                        "MuxedStream: v {video} a {audio} = {name}".format(
+                            audio=best_audio_itag,
+                            name=name,
+                            video=itag,
+                        )
+                    )
+                    streams[name] = MuxedStream(self.session, HTTPStream(self.session, vurl), HTTPStream(self.session, aurl))
+
+        return streams
+
+    def set_consent_ck(self, consent):
+        self.session.http.cookies.set(
+            'CONSENT',
+            consent,
+            domain='.youtube.com', path="/")
+
+    def _get_data(self, url):
+        res = self.session.http.get(url)
+        if urlparse(res.url).netloc == "consent.youtube.com":
+            c_data = {}
+            for _i in itertags(res.text, "input"):
+                if _i.attributes.get("type") == "hidden":
+                    c_data[_i.attributes.get("name")] = html_unescape(_i.attributes.get("value"))
+            log.debug("c_data_keys: {}".format(', '.join(c_data.keys())))
+            res = self.session.http.post("https://consent.youtube.com/s", data=c_data)
+            consent = self.session.http.cookies.get('CONSENT', domain='.youtube.com')
+            if 'YES' in consent:
+                self.cache.set("consent_ck", consent)
+
+        if self._find_canonical_url:
+            self._find_canonical_url = False
+            canonical_url = self._get_canonical_url(res.text)
+            if canonical_url is None:
+                raise NoStreamsError(url)
+            return self._get_data(canonical_url)
+
+        match = re.search(self._re_ytInitialPlayerResponse, res.text)
+        if not match:
+            raise PluginError("Missing initial player response data")
+
+        return parse_json(match.group(1))
+
+    def _find_video_id(self, url):
+        m = self._url_re.match(url)
+        if m and m.group("video_id"):
+            log.debug("Video & PL ID from URL")
+            return m.group("video_id"), m.group("pl_id")
+
+        data = self._get_data(update_scheme("https://", url.replace("youtubedl://", "")))
+        status, reason = self._schema_playabilitystatus(data)
+        if status != "OK":
+            log.error("Could not get video info: {0}".format(reason))
+            return None, None
+
+        video_id, self.author, self.title, is_live = self._schema_videodetails(data)
+        log.debug("Using video ID: {0}".format(video_id))
+        return video_id, None
+
+    def _save2M3U(self, pl_path, info, ua):
+        m3u = "#EXTM3U,$MODE=IPTV\n"
+        if pl_path.startswith("/tmp/." + __name__):
+            pl_title = "Playlist(temp.)"
+        else:
+            pl_title = info["title"]
+        for item in info.get("entries", []):
+            title = item.get("title")
+            url = item.get("id")
+            if not (url and title):
+                continue
+
+            url = "http://127.0.0.1:8088/youtubedl://youtube.com/watch?v={0}".format(url)
+            if title not in ["[Deleted video]", "[Private video]"]:
+                m3u += "#EXTINF:0,{0}\n{1}\n".format(title, url)
+
+        path = os.path.join(pl_path, "YTDL: " + pl_title + ".m3u").encode("utf8")
+        if not os.path.isfile(path) or path.startswith("/tmp/." + __name__):
+            with open(path, "w") as f:
+                f.write(m3u)
+            log.info("M3U Playlist '{0}' written".format(path))
+        else:
+            log.info("M3U Playlist '{0}' exists, skipped".format(path))
+
+    def _get_stream_info(self, video_id, pl_id):
+        info = None
+        log.debug("Starting YoutubeDL process")
+        try:
+            ytdl = YoutubeDL(self.ytdl_options)
+            url = "https://www.youtube.com/watch?v=%s" % video_id
+            info = ytdl.extract_info(url, ie_key="Youtube", download=False, process=True)
+            ua = info["formats"][-1]["http_headers"]["User-Agent"]
+            self.session.http.headers.update({"User-Agent": ua})
+
+            pl_path = self.get_option("playlist-dir")
+            if pl_id and pl_path:
+                if not os.path.isdir(pl_path):
+                    os.makedirs(pl_path)
+                    log.debug("Playlist directory '{0}' created".format(pl_path))
+
+                url = "https://www.youtube.com/playlist?list=%s" % pl_id
+                _info = ytdl.extract_info(url, ie_key="YoutubePlaylist", download=False, process=True)
+                self._save2M3U(pl_path, _info, ua)
+        except Exception as e:
+            raise PluginError(e)
+
+        return info
+
+    def _get_streams(self):
+        is_live = False
+        if not self.video_id:
+            self.video_id, self.pl_id = self._find_video_id(self.url)
+            if not self.video_id:
+                return
+
+        info = self._get_stream_info(self.video_id, self.pl_id)
+        if not info:
+            log.error("Could not get video info")
+            return
+
+        if info.get("is_live"):
+            log.debug("This video is live.")
+            is_live = True
+
+        streams = {}
+        for stream_info in info.get("formats", []):
+            itag = int(stream_info["format_id"])
+            if itag not in self.video:
+                if is_live:
+                    log.debug(
+                        "Skipped format:{}, Codecs: v {} a {}",
+                        stream_info["format"],
+                        stream_info["vcodec"],
+                        stream_info["acodec"],
+                    )
+                continue
+
+            url = stream_info["url"]
+            name = self.video[itag]
+            if stream_info.get("protocol", "") != "m3u8":
+                stream = HTTPStream(self.session, url)
+                streams[name] = stream
+            else:
+                stream = HLSStream(self.session, url)
+                streams[name] = stream
+
+        if not is_live and not self.get_option("no-adaptive-streams"):
+            streams = self._create_adaptive_streams(info, streams)
+        else:
+            log.info("Adaptive streams are skipped")
+
+        return streams
+
+
+__plugin__ = YouTubeDL
-- 
2.25.1

