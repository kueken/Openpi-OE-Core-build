diff --git a/cmake/platform/linux/stb.cmake b/cmake/platform/linux/stb.cmake
new file mode 100644
index 0000000..dd62eff
--- /dev/null
+++ b/cmake/platform/linux/stb.cmake
@@ -0,0 +1,38 @@
+set(PLATFORM_REQUIRED_DEPS EGL LibInput Xkbcommon)
+
+set(STB_RENDER_SYSTEM "" CACHE STRING "Render system to use with STB: \"gl\" or \"gles\"")
+
+if(ENABLE_OPENGL STREQUAL "ON")
+  list(APPEND PLATFORM_REQUIRED_DEPS OpenGl)
+  set(APP_RENDER_SYSTEM gl)
+  message(STATUS "STB_RENDER_SYSTEM=GL")
+elseif(ENABLE_GLES STREQUAL "ON")
+  list(APPEND PLATFORM_REQUIRED_DEPS OpenGLES)
+  set(APP_RENDER_SYSTEM gles)
+  message(STATUS "STB_RENDER_SYSTEM=GLES")
+else()
+  message(SEND_ERROR "You need to decide whether you want to use GL- or GLES-based rendering in combination with the STB windowing system. Please set STB_RENDER_SYSTEM to either \"gl\" or \"gles\". For normal desktop systems, you will usually want to use \"gl\".")
+endif()
+
+if(WITH_V3D STREQUAL "v3dplatform")
+  list(APPEND PLATFORM_DEFINES "-DTARGET_V3D")
+  list(APPEND DEPLIBS v3dplatform)
+elseif(WITH_V3D STREQUAL "nxpl")
+  list(APPEND PLATFORM_DEFINES "-DTARGET_V3D")
+  list(APPEND DEPLIBS nxpl nexus)
+elseif(WITH_V3D STREQUAL "nxcl")
+  list(APPEND PLATFORM_DEFINES "-DTARGET_V3D")
+  list(APPEND DEPLIBS nxpl nexus nxclient)
+elseif(WITH_V3D STREQUAL "nxinit")
+  list(APPEND PLATFORM_DEFINES "-DTARGET_V3D")
+  list(APPEND DEPLIBS nxpl nexus nxclient gles_init)
+elseif(WITH_V3D STREQUAL "vuarm")
+  list(APPEND PLATFORM_DEFINES "-DTARGET_V3D")
+  list(APPEND DEPLIBS KodiGLESPL dvb_base nxpl dvb_client)
+elseif(WITH_V3D STREQUAL "vumips")
+  list(APPEND PLATFORM_DEFINES "-DTARGET_V3D")
+  list(APPEND DEPLIBS dvb_base nxpl xbmc_base dvb_client gles_init)
+endif()
+
+list(APPEND DEPLIBS EGL GLESv2)
+list(APPEND PLATFORM_DEFINES -DEGL_NO_X11 -DTARGET_STB)
diff --git a/xbmc/addons/AddonManager.cpp b/xbmc/addons/AddonManager.cpp
index 4d6e27e3d91..28bdd382c66 100644
--- a/xbmc/addons/AddonManager.cpp
+++ b/xbmc/addons/AddonManager.cpp
@@ -1048,6 +1048,12 @@ bool CAddonMgr::PlatformSupportsAddon(const cp_plugin_info_t *plugin)
 #else
     #warning no architecture dependant platform tag
 #endif
+#elif defined(TARGET_MALI)
+    "mali",
+    "linux",
+#elif defined(TARGET_V3D)
+    "v3d",
+    "linux",
 #elif defined(TARGET_FREEBSD)
     "freebsd",
     "linux",
@@ -1157,6 +1163,12 @@ std::string CAddonMgr::GetPlatformLibraryName(cp_cfg_element_t *base) const
 #if defined(TARGET_FREEBSD)
   libraryName = GetExtValue(base, "@library_freebsd");
   if (libraryName.empty())
+#elif defined(TARGET_V3D)
+  libraryName = GetExtValue(base, "@library_v3d");
+  if (libraryName.empty())
+#elif defined(TARGET_MALI)
+  libraryName = GetExtValue(base, "@library_mali");
+  if (libraryName.empty())
 #endif
   libraryName = GetExtValue(base, "@library_linux");
 #elif defined(TARGET_WINDOWS_DESKTOP)
