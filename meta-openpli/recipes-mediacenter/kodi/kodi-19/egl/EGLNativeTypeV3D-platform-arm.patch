diff --git a/xbmc/windowing/egl/EGLNativeTypeSTB.cpp b/xbmc/windowing/egl/EGLNativeTypeSTB.cpp
new file mode 100644
index 0000000..3023daf
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeSTB.cpp
@@ -0,0 +1,174 @@
+/*
+ *      Copyright (C) 2011-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+#include <EGL/egl.h>
+
+#include "system.h"
+#include "EGLNativeTypeSTB.h"
+#include "utils/StringUtils.h"
+#include "utils/log.h"
+#include "guilib/gui3d.h"
+//#include "platform/linux/DllBCM.h"
+#include "windowing/GraphicContext.h"
+
+bool CEGLNativeTypeSTB::CheckCompatibility()
+{
+  return true;
+}
+
+void CEGLNativeTypeSTB::Initialize()
+{
+}
+
+void CEGLNativeTypeSTB::Destroy()
+{
+}
+
+bool CEGLNativeTypeSTB::CreateNativeDisplay()
+{
+  m_nativeDisplay = EGL_DEFAULT_DISPLAY;
+  return true;
+}
+
+bool CEGLNativeTypeSTB::CreateNativeWindow()
+{
+  V3D_RegisterDisplayPlatform(&m_platformHandle, m_nativeDisplay);
+  if (!m_platformHandle)
+    return false;
+
+  V3D_NativeWindowInfo info;
+
+  info.x = 0;
+  info.y = 0;
+  info.width = 1280;
+  info.height = 720;
+  info.stretch = false;
+  info.clientID = 0;
+  info.zOrder = 0;
+
+  m_nativeWindow = V3D_CreateNativeWindow(&info);
+  if (!m_nativeWindow)
+    return false;
+
+  return true;
+}
+
+bool CEGLNativeTypeSTB::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
+{
+  *nativeDisplay = (XBNativeDisplayType*) &m_nativeDisplay;
+  return true;
+}
+
+bool CEGLNativeTypeSTB::GetNativeWindow(XBNativeWindowType **nativeWindow) const
+{
+  *nativeWindow = (XBNativeWindowType*) &m_nativeWindow;
+  return true;
+}
+
+bool CEGLNativeTypeSTB::DestroyNativeDisplay()
+{
+  m_nativeDisplay = 0;
+  return true;
+}
+
+bool CEGLNativeTypeSTB::DestroyNativeWindow()
+{
+  V3D_DestroyNativeWindow(m_nativeWindow);
+  m_nativeWindow = 0;
+
+  V3D_UnregisterDisplayPlatform(m_platformHandle);
+  return true;
+}
+
+bool CEGLNativeTypeSTB::GetNativeResolution(RESOLUTION_INFO *res) const
+{
+  *res = m_desktopRes;
+  return true;
+}
+
+bool CEGLNativeTypeSTB::SetNativeResolution(const RESOLUTION_INFO &res)
+{
+  m_desktopRes = res;
+  return true;
+}
+
+bool CEGLNativeTypeSTB::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
+{
+  resolutions.clear();
+
+  m_desktopResAll[0].bFullScreen  = true;
+  m_desktopResAll[0].iWidth       = 1280;
+  m_desktopResAll[0].iHeight      = 720;
+  m_desktopResAll[0].iScreenWidth = 1280;
+  m_desktopResAll[0].iScreenHeight= 720;
+  m_desktopResAll[0].dwFlags      = D3DPRESENTFLAG_PROGRESSIVE;
+  m_desktopResAll[0].fRefreshRate = 50;
+  m_desktopResAll[0].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[0].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen", m_desktopRes.strMode.c_str(), 50., "");
+  m_desktopResAll[0].iSubtitles   = static_cast<int>(0.965 * m_desktopResAll[0].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[0].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[0]);
+
+  m_desktopResAll[1].bFullScreen  = true;
+  m_desktopResAll[1].iWidth       = 1280;
+  m_desktopResAll[1].iHeight      = 720;
+  m_desktopResAll[1].iScreenWidth = 1280;
+  m_desktopResAll[1].iScreenHeight= 720;
+  m_desktopResAll[1].dwFlags      = D3DPRESENTFLAG_PROGRESSIVE | D3DPRESENTFLAG_MODE3DSBS;
+  m_desktopResAll[1].fRefreshRate = 50;
+  m_desktopResAll[1].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[1].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen 3DSBS", m_desktopResAll[1].strMode.c_str(), 50., "");
+  m_desktopResAll[1].iSubtitles   = static_cast<int>(0.965 * m_desktopResAll[1].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[1].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[1]);
+
+  m_desktopResAll[2].bFullScreen  = true;
+  m_desktopResAll[2].iWidth       = 1280;
+  m_desktopResAll[2].iHeight      = 720;
+  m_desktopResAll[2].iScreenWidth = 1280;
+  m_desktopResAll[2].iScreenHeight= 720;
+  m_desktopResAll[2].dwFlags      = D3DPRESENTFLAG_PROGRESSIVE | D3DPRESENTFLAG_MODE3DTB;
+  m_desktopResAll[2].fRefreshRate = 50;
+  m_desktopResAll[2].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[2].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen 3DTB", m_desktopResAll[2].strMode.c_str(), 50., "");
+  m_desktopResAll[2].iSubtitles   = static_cast<int>(0.965 * m_desktopResAll[2].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[2].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[2]);
+
+  m_desktopRes = m_desktopResAll[0];
+
+  return true;
+}
+
+bool CEGLNativeTypeSTB::GetPreferredResolution(RESOLUTION_INFO *res) const
+{
+  *res = m_desktopResAll[0];
+  return true;
+}
+
+bool CEGLNativeTypeSTB::ShowWindow(bool show)
+{
+  return V3D_SetVisible(m_nativeWindow, show);
+}
diff --git a/xbmc/windowing/egl/EGLNativeTypeSTB.h b/xbmc/windowing/egl/EGLNativeTypeSTB.h
new file mode 100644
index 0000000..c3b7624
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeSTB.h
@@ -0,0 +1,61 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2011-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <vector>
+#include <string>
+#include <v3dplatform.h>
+
+#include "EGLNativeType.h"
+
+class CEGLNativeTypeSTB : public CEGLNativeType
+{
+public:
+  CEGLNativeTypeSTB() : m_platformHandle(0) {
+    m_nativeDisplay = 0;
+    m_nativeWindow = 0;
+  }
+  virtual ~CEGLNativeTypeSTB() {};
+  virtual std::string GetNativeName() const { return "STB"; };
+  virtual bool  CheckCompatibility();
+  virtual void  Initialize();
+  virtual void  Destroy();
+  virtual int   GetQuirks() { return EGL_QUIRK_NONE; };
+
+  virtual bool  CreateNativeDisplay();
+  virtual bool  CreateNativeWindow();
+  virtual bool  GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const;
+  virtual bool  GetNativeWindow(XBNativeWindowType **nativeWindow) const;
+
+  virtual bool  DestroyNativeWindow();
+  virtual bool  DestroyNativeDisplay();
+
+  virtual bool  GetNativeResolution(RESOLUTION_INFO *res) const;
+  virtual bool  SetNativeResolution(const RESOLUTION_INFO &res);
+  virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
+  virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
+
+  virtual bool  ShowWindow(bool show);
+private:
+  RESOLUTION_INFO m_desktopRes;
+  RESOLUTION_INFO m_desktopResAll[3];
+  V3D_PlatformHandle m_platformHandle;
+};
-- 
2.7.4
